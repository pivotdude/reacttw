# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type MediaModel {
  id: Int!
  url: String!
  size: Float!
  name: String!
  mimeType: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserModel {
  id: Int!
  name: String
  avatar: MediaModel
  login: String!
  email: String!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PhotoLikeModel {
  id: Int!
  isLike: Boolean!
  photo: PhotoModel!
  user: UserModel!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PhotoModel {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  media: MediaModel
  user: UserModel!
  likes: [PhotoLikeModel!]
  likeCount: Int
  dislikeCount: Int
}

type PhotoSavesModel {
  id: Int!
  photo: PhotoModel!
  user: UserModel!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SubscriptionModel {
  id: Int!
  author: UserModel!
  user: UserModel!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProfileInput {
  id: Int!
  photos: [PhotoModel!]
  name: String
  avatar: MediaModel
  savedPhotos: [PhotoSavesModel!]
  photosLikes: [PhotoLikeModel!]
  subscriptions: [SubscriptionModel!]
  subscribers: [SubscriptionModel!]
  subscriptionsCount: Int!
  subscribersCount: Int!
  login: String!
  email: String!
  isActive: Boolean!
  isUserProfile: Boolean!
  isUserFollow: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type findPhotoModel {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  media: MediaModel
  user: UserModel!
  likeCount: Int!
  dislikeCount: Int!
  userLiked: Boolean!
  userDisliked: Boolean!
  userSaved: Boolean!
}

type CommentModel {
  id: Int!
  text: String!
  photo: PhotoModel
  user: UserModel!
  likes: [PhotoLikeModel!]
  likeCount: Int
  dislikeCount: Int
  comments: [CommentModel!]
  parrent: CommentModel
  userLiked: Boolean!
  userDisliked: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AuthAnswer {
  message: String!
  ok: Boolean!
}

type LoginAnswerModel {
  message: String!
  ok: Boolean!
  accessToken: String!
}

type Query {
  subscriptions: [SubscriptionModel!]!
  users: [UserModel!]!
  user(login: String!): ProfileInput!
  account: UserModel!
  saves: PhotoSavesModel!
  photos: [PhotoModel!]!
  photo(id: Int!): findPhotoModel!
  comments(input: CommentsInput!): [CommentModel!]!
}

input CommentsInput {
  photoId: Int!
  pagination: PaginationInput
}

input PaginationInput {
  offset: Int
  limit: Int
}

type Mutation {
  follow(userId: Int!): SubscriptionModel!
  unfollow(userId: Int!): SubscriptionModel!
  sendLoginCode(input: SendLoginCodeInput!): AuthAnswer!
  sendRegisterCode(input: SendRegisterCodeInput!): AuthAnswer!
  confirmLogin(input: ConfirmLoginCodeInput!): LoginAnswerModel!
  confirmRegister(input: ConfirmRegisterCodeInput!): AuthAnswer!
  createUser(input: UserCreateInput!): UserModel!
  updateUser(input: UpdateUserInput!): UserModel!
  delete(id: Float!): UserModel!
  createPhotoSaves(input: PhotoSavesInput!): PhotoSavesModel!
  deletePhotoSaves(input: PhotoSavesInput!): PhotoSavesModel!
  addCommentLike(input: AddCommentLikeInput!): PhotoLikeModel!
  addCommentDislike(input: AddCommentLikeInput!): PhotoLikeModel!
  deleteCommentLike(input: AddCommentLikeInput!): PhotoLikeModel!
  createUserPhotos(input: CreateUserPhotoInput!): [PhotoModel!]!
  addPhotoLike(input: addPhotoLikeInput!): PhotoLikeModel!
  addPhotoDislike(input: addPhotoLikeInput!): PhotoLikeModel!
  deletePhotoLike(input: addPhotoLikeInput!): PhotoLikeModel!
  createComment(input: CreateCommentInput!): CommentModel!
}

input SendLoginCodeInput {
  email: String!
}

input SendRegisterCodeInput {
  email: String!
}

input ConfirmLoginCodeInput {
  code: String!
  email: String!
}

input ConfirmRegisterCodeInput {
  code: String!
  email: String!
  name: String
  login: String!
}

input UserCreateInput {
  name: String!
  login: String!
  email: String!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UpdateUserInput {
  name: String
  login: String
  avatarId: Int
  email: String
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoSavesInput {
  photo: Int!
}

input AddCommentLikeInput {
  commentId: Int!
}

input CreateUserPhotoInput {
  """Array of photo IDs"""
  photoIds: [Float!]!
}

input addPhotoLikeInput {
  photoId: Int!
}

input CreateCommentInput {
  text: String!
  photo: Int!
}